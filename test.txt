## 远程仓库
> 请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置

#### 一、设置Git的user name和email：
>
     $ git config --global user.name "guoyanli78"
     $ git config --global user.email "18294953893@163.com"

#### 二、生成SSH密钥过程：
     1.cd ~/.ssh  
     2.ls  查看  是否有下列文件
     github_rsa  github_rsa.pub  id_rsa  id_rsa.pub  known_hosts
     如果没有 则生成秘钥
     2.生存密钥：
     $ ssh-keygen -t rsa -C "你的github 账号"
     密码可以为空 也可以设置（但要记住了，因为后面提交的时候会用到）
> 最后得到了两个文件：id_rsa和id_rsa.pub

#### 三、登陆GitHub 
##### 打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容点“Add Key”，你就应该看到已经添加的Key 。
>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。

#### 四、添加远程仓库
> 现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
      首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库 （仓库名自己取），其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git远程仓库
##### $ git remote add origin git@github.com:你的github/仓库名.git    //  
> 创建完毕后页面上会有这样的类似于 这样的仓库地址 ：(git@github.com:zhaohongbo910/node-blog.git )  注意观察 
> 请千万注意，替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。

添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

## 安装 

> 具体的安装详见百度 
```
     $ git config --global user.name "Your Name"
     $ git config --global user.email "email@example.com"
     git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置
     当然也可以对某个仓库指定不同的用户名和Email地址
```

## 创建仓库

> 在一个合适的位置
```
     $ mkdir  Repository   创建文件夹 Repository
     $ cd  Repository      打开文件夹 
     $ pwd  查看当前的仓库的目录
```
##  初始化本地仓库

#### git init 初始化本地仓库
```
     $ git init   初始化本地仓库   
     $ Initialized empty Git repository in E:/Repository/.git/  
     初始化结束以后会生成一个.git的目录，这个目录是Git来跟踪管理版本库的
     没事千万不要手动修改这个目录里面的文件不然改乱了，就把Git仓库给破坏了 
     如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见    
```

## 文件添加到仓库

> 首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道.强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突又被所有平台所支持。现在我们编写一个first.txt文件  内容自家编写 (不要用Windows自带的文本编辑器)，因为很垃圾）

#### git add 文件添加到仓库

> 第一步，用命令git add 告诉Git，把文件添加到仓库
```
     git add first.txt
     使用命令git add <file>，注意，可反复多次使用，添加多个文件 
     执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。   
```
#### git commit 文件提交到仓库

> 第二步，用命令git commit告诉Git，把文件提交到仓库
```
     $ git commit -m "the 1st revision"
     结果
     [master (root-commit) 17ceae9] first commit firstfile
      1 file changed, 1 insertion(+)
     create mode 100644 first.txt
 
```    
>简单解释一下git commit命令 -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，
这样你就能从历史记录里方便地找到改动记录。嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。git commit命令执行成功后会告诉你，1个文件被改动，插入了两行内容为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：

```    
     $ git add file1.txt
     $ git add file2.txt file3.txt
     $ git commit -m "add 3 files."
```
> 我们已经成功地添加并提交了一个first.txt文件，现在是时候继续工作了，于是，我们继续修改first.txt文件，内容自行自定义


#### git status 命令可以让我们时刻掌握仓库当前的状态
```
     $ git status  
     结果 
     On branch master
     Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
     
     modified:   first.txt
     
     Untracked files:(use "git add <file>..." to include in what will be committed)
     node.md
     no changes added to commit (use "git add" and/or "git commit -a") 
     
     git status 命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，first.txt被修改过了，但还没有准备提交的修改。
```

#### git diff 查看
```
     这个命令就是查看我们到底对first.txt 文件修改了什么，知道了对文件作了什么修改后，再把它提交到仓库就放心多了
     提交修改和提交新文件是一样的两步
     第一步是 git add：
     同样没有任何输出。在执行第二步git commit之前
     我们再运行git status看看当前仓库的状态：git status
     
    $ git status
     On branch master
     Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
     modified:   first.txt
     no changes added to commit (use "git add" and/or "git commit -a")
     
     git status告诉我们，将要被提交的修改包括first.txt，下一步，就可以放心地提交了：
     
     git commit -m "add distributed"
     [master ea34578] add distributed
     1 file changed, 1 insertion(+), 1 deletion(-)
    
     提交后，我们再用git status命令看看仓库的当前状态：
     $ git status
     # On branch master
     nothing to commit (working directory clean)
     Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的。
```
>  现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再次修改文件，添加，提交。像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。

#### git log 版本查看 

```
     $ git log
     // 输出
     commit b58fe4ddfaaf6e47744eacd846bdedd51e19c487
     Author: zhaohongbo <zhaohongbo910@163.com>
     Date:   Fri Mar 31 16:39:24 2017 +0800
     the 2ed revisions 
    
     commit 17ceae968402019138867a246de0d8e603272916
     Author: zhaohongbo <zhaohongbo910@163.com>
     Date:   Fri Mar 31 15:44:15 2017 +0800
     the 1st revision
``` 
> git log 命令显示从最近到最远的提交日志，我们可以看到2次提交，最近的一次是the 2ed revision 第一次是  the 1st revision file如果嫌输出信息太多，看得眼花缭乱的，可以试试加上    --pretty=oneline  参数：需要友情提示的是，你看到的一大串类似b58fe4.....19c487的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
> 好了，现在我们启动时光穿梭机，准备把first.txt回退到上一个版本，也就是“the 1st revisions”的那个版本，怎么做呢？
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交b58fe4dd...1e19c487（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
现在，我们要把当前版本“the 2ed revisions”回退到上一个版本“the 1st revisions”，就可以使用git reset命令：

#### git reset 版本回退
```
     $ git reset --hard HEAD^   //   用HEAD表示当前版本  上一个版本就是HEAD^  
     结果 展示当前的版本是哪个  
     HEAD is now at 17ceae9 the 1st revisions  
     
     不过且慢，然我们用git log再看看现在版本库的状态：
          
          Author: zhaohongbo <zhaohongbo910@163.com>
          Date:   Fri Mar 31 15:44:15 2017 +0800
          the 1st revisions    
```
>最新的那个版本 the 2ed revisions 已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个the 2ed revisions  的commit id是b58fe4....487于是就可以指定回到未来的某个版本：
```
     $ git reset --hard b58fe4dd
       HEAD is now at b58fe4dd 
```
>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
再小心翼翼地看看first.txt的内容,果然，我胡汉三又回来了。

#### git reflog历史记录
```
     17ceae9 HEAD@{0}: reset: moving to HEAD^    
     b58fe4d HEAD@{1}: commit: the 2ed revision
     17ceae9 HEAD@{2}: commit (initial): the 1st revision     s
```
## 工作区（Working Directory）

>就是你在电脑里能看到的目录，比如我的Repository文件夹就是一个工作区

## 版本库（.git）
>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
俗话说，实践出真知。现在，我们再练习一遍，先对first.txt做个修改
然后，在工作区新增一个LICENSE文本文件（内容随便写）。
```
     $ git status
      On branch master
      Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
      
      modified:   first.xt
      
      Untracked files:
      (use "git add <file>..." to include in what will be committed)
       LICENSE
     no changes added to commit (use "git add" and/or "git commit -a")
```
> 所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支

#### git checkout -- file 可以放弃工作区的修改
>命令git checkout -- first.txt意思就是，把first.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是first.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是first.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态
```
     git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令
```
#### git reset HEAD file 可以把暂存区的修改撤销掉重新放回工作区
```
      $ git reset HEAD first.txt
     Unstaged changes after reset:
     M       first.txt

```
>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交一般情况下，你通常直接在文件管理器中把没用的文件删了用命令 rm 
####  rm  删除工作区的文件
```
      rm test.txt     删除
     
      $ git status   查看状态
     On branch master
     Changes not staged for commit:
     (use "git add/rm <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
        modified:   first.txt    修改的文件  
        deleted:    test.txt    删除的文件
     no changes added to commit (use "git add" and/or "git commit -a")
```
#### git rm 删除该版本库中的文件
>要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
```
     $ git rm test.txt  删除该版本库中的文件
     rm 'test.txt'## 安装 

> 具体的安装详见百度 
```
     $ git config --global user.name "Your Name"
     $ git config --global user.email "email@example.com"
     git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置
     当然也可以对某个仓库指定不同的用户名和Email地址
```

## 创建仓库

> 在一个合适的位置
```
     $ mkdir  Repository   创建文件夹 Repository
     $ cd  Repository      打开文件夹 
     $ pwd  查看当前的仓库的目录
```
##  初始化本地仓库

#### git init 初始化本地仓库
```
     $ git init   初始化本地仓库   
     $ Initialized empty Git repository in E:/Repository/.git/  
     初始化结束以后会生成一个.git的目录，这个目录是Git来跟踪管理版本库的
     没事千万不要手动修改这个目录里面的文件不然改乱了，就把Git仓库给破坏了 
     如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见    
```

## 文件添加到仓库

> 首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，
Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，
在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，
但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，
但到底改了啥，版本控制系统不知道，也没法知道.强烈建议使用标准的UTF-8编码，
所有语言使用同一种编码，既没有冲突又被所有平台所支持。现在我们编写一个first.txt文件  
内容自家编写 (不要用Windows自带的文本编辑器)，因为很垃圾）

#### git add 文件添加到仓库

> 第一步，用命令git add 告诉Git，把文件添加到仓库
```
     git add first.txt
     使用命令git add <file>，注意，可反复多次使用，添加多个文件 
     执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。   
```
#### git commit 文件提交到仓库

> 第二步，用命令git commit告诉Git，把文件提交到仓库
```
     $ git commit -m "the 1st revision"
     结果
     [master (root-commit) 17ceae9] first commit firstfile
      1 file changed, 1 insertion(+)
     create mode 100644 first.txt
 
```    
>简单解释一下git commit命令 -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，
这样你就能从历史记录里方便地找到改动记录。嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。git commit命令执行成功后会告诉你，1个文件被改动，插入了两行内容为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：

```    
     $ git add file1.txt
     $ git add file2.txt file3.txt
     $ git commit -m "add 3 files."
```
> 我们已经成功地添加并提交了一个first.txt文件，现在是时候继续工作了，于是，我们继续修改first.txt文件，内容自行自定义


#### git status 命令可以让我们时刻掌握仓库当前的状态
```
     $ git status  
     结果 
     On branch master
     Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
     
     modified:   first.txt
     
     Untracked files:(use "git add <file>..." to include in what will be committed)
     node.md
     no changes added to commit (use "git add" and/or "git commit -a") 
     
     git status 命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，first.txt被修改过了，但还没有准备提交的修改。
```

#### git diff 查看
```
     这个命令就是查看我们到底对first.txt 文件修改了什么，知道了对文件作了什么修改后，再把它提交到仓库就放心多了
     提交修改和提交新文件是一样的两步
     第一步是 git add：
     同样没有任何输出。在执行第二步git commit之前
     我们再运行git status看看当前仓库的状态：git status
     
    $ git status
     On branch master
     Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
     modified:   first.txt
     no changes added to commit (use "git add" and/or "git commit -a")
     
     git status告诉我们，将要被提交的修改包括first.txt，下一步，就可以放心地提交了：
     
     git commit -m "add distributed"
     [master ea34578] add distributed
     1 file changed, 1 insertion(+), 1 deletion(-)
    
     提交后，我们再用git status命令看看仓库的当前状态：
     $ git status
     # On branch master
     nothing to commit (working directory clean)
     Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的。
```
>  现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再次修改文件，添加，提交。像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。

#### git log 版本查看 

```
     $ git log
     // 输出
     commit b58fe4ddfaaf6e47744eacd846bdedd51e19c487
     Author: zhaohongbo <zhaohongbo910@163.com>
     Date:   Fri Mar 31 16:39:24 2017 +0800
     the 2ed revisions 
    
     commit 17ceae968402019138867a246de0d8e603272916
     Author: zhaohongbo <zhaohongbo910@163.com>
     Date:   Fri Mar 31 15:44:15 2017 +0800
     the 1st revision
``` 
> git log 命令显示从最近到最远的提交日志，我们可以看到2次提交，最近的一次是the 2ed revision 第一次是  the 1st revision file如果嫌输出信息太多，看得眼花缭乱的，可以试试加上    --pretty=oneline  参数：需要友情提示的是，你看到的一大串类似b58fe4.....19c487的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
> 好了，现在我们启动时光穿梭机，准备把first.txt回退到上一个版本，也就是“the 1st revisions”的那个版本，怎么做呢？
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交b58fe4dd...1e19c487（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
现在，我们要把当前版本“the 2ed revisions”回退到上一个版本“the 1st revisions”，就可以使用git reset命令：

#### git reset 版本回退
```
     $ git reset --hard HEAD^   //   用HEAD表示当前版本  上一个版本就是HEAD^  
     结果 展示当前的版本是哪个  
     HEAD is now at 17ceae9 the 1st revisions  
     
     不过且慢，然我们用git log再看看现在版本库的状态：
          
          Author: zhaohongbo <zhaohongbo910@163.com>
          Date:   Fri Mar 31 15:44:15 2017 +0800
          the 1st revisions    
```
>最新的那个版本 the 2ed revisions 已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个the 2ed revisions  的commit id是b58fe4....487于是就可以指定回到未来的某个版本：
```
     $ git reset --hard b58fe4dd
       HEAD is now at b58fe4dd 
```
>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
再小心翼翼地看看first.txt的内容,果然，我胡汉三又回来了。

#### git reflog历史记录
```
     17ceae9 HEAD@{0}: reset: moving to HEAD^    
     b58fe4d HEAD@{1}: commit: the 2ed revision
     17ceae9 HEAD@{2}: commit (initial): the 1st revision     s
```
## 工作区（Working Directory）

>就是你在电脑里能看到的目录，比如我的Repository文件夹就是一个工作区

## 版本库（.git）
>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
俗话说，实践出真知。现在，我们再练习一遍，先对first.txt做个修改
然后，在工作区新增一个LICENSE文本文件（内容随便写）。
```
     $ git status
      On branch master
      Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
      
      modified:   first.xt
      
      Untracked files:
      (use "git add <file>..." to include in what will be committed)
       LICENSE
     no changes added to commit (use "git add" and/or "git commit -a")
```
> 所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支

#### git checkout -- file 可以放弃工作区的修改
>命令git checkout -- first.txt意思就是，把first.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是first.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是first.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态
```
     git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令
```
#### git reset HEAD file 可以把暂存区的修改撤销掉重新放回工作区
```
      $ git reset HEAD first.txt
     Unstaged changes after reset:
     M       first.txt

```
>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交一般情况下，你通常直接在文件管理器中把没用的文件删了用命令 rm 
####  rm  删除工作区的文件
```
      rm test.txt     删除
     
      $ git status   查看状态
     On branch master
     Changes not staged for commit:
     (use "git add/rm <file>..." to update what will be committed)
     (use "git checkout -- <file>..." to discard changes in working directory)
        modified:   first.txt    修改的文件  
        deleted:    test.txt    删除的文件
     no changes added to commit (use "git add" and/or "git commit -a")
```
#### git rm 删除该版本库中的文件
>要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
```
     $ git rm test.txt  删除该版本库中的文件
     rm 'test.txt'
    
     
     $ git commit -m "remove test.txt"      //  再次提交一下
     [master d325b58] remove test.txt
     1 file changed, 1 deletion(-)
     delete mode 100644 test.txt

```
>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
```
很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。

Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？

事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！

你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。

不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。

安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。

Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：

Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。

Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。

历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。
    
     
     $ git commit -m "remove test.txt"      //  再次提交一下
     [master d325b58] remove test.txt
     1 file changed, 1 deletion(-)
     delete mode 100644 test.txt

```
>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
```

